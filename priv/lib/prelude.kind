import beam/erlang/{<, >}

module kind/prelude {
    Boolean
    Boolean/True
    Boolean/False
    Option
    Option/Nil
    match
    get
    compare
    Compare
}

type Boolean -> (True | False)

type Option a -> (a | Nil)

def match a f -> f(a)

def get ['tagged', _, domain] -> domain

type Compare -> (GT | LT | EQ)
import Compare/_

def compare a b -> (a > b).match(
  | 'true'  -> GT
  | 'false' -> (a < b).match(
      | 'false' -> EQ
      | 'true'  -> LT))
